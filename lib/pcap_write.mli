module type Pcap_writer = sig

  type error
  type fs

  (** given a buffer of sufficient size,
      write a pcap file header into the buffer via the module's set functions *)
  val create_file_header : Cstruct.t -> unit

  (** [create_packet_header buf time packet_size] makes a pcap packet header at
      the beginning of [buf] reflecting a write time of [time] and an original
      packet size of [packet_size]. *)
  val create_packet_header : Cstruct.t -> float -> int -> unit

  (** [create_pcap_file fs file] writes a pcap file header to [fs] 
      with the filename [file] *)
  val create_pcap_file : fs -> string -> [ `Ok of unit | `Error of error ] Lwt.t

  (** [write_packet fs file offset time buf] writes a pcap packet header + the
      content in [buf] to [file] on [fs], starting at [offset].  Errors
      generated by the filesystem write command will be returned directly; 
      on success, return [`Ok bytes_written]. *)
  val append_packet_to_file : fs -> string -> int -> float -> Cstruct.t -> 
    [ `Ok of int | `Error of error ] Lwt.t

end

module Make (Pcap : Pcap.HDR) 
    (FS : V1_LWT.FS with type page_aligned_buffer = Cstruct.t) : 
  Pcap_writer with type error = FS.error and type fs = FS.t
